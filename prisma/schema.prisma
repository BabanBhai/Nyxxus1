generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  registrations Registration[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model GamePortal {
  id             String         @id @default(cuid())
  eventName      String
  maxTeams       Int
  entryFees      String
  prizePool      String
  eventBio       String         @db.Text
  smallRules     String         @db.Text
  eventStartDate DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  registrations  Registration[]

  @@map("game_portals")
}

model Registration {
  id               String     @id @default(cuid())
  userId           String     @map("user_id")
  portalId         String     @map("portal_id")
  teamName         String
  teamMembers      String     @db.Text
  contactInfo      String
  registrationCode String     @unique
  status           String     @default("Payment Pending")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  portal GamePortal @relation(fields: [portalId], references: [id], onDelete: Cascade)

  @@unique([userId, portalId])
  @@map("registrations")
}

model HomeContent {
  id        String   @id @default(cuid())
  aboutUs   String   @db.Text
  contactUs String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("home_content")
}